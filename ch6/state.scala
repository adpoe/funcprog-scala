/** Purely functional random number generation */
// make state updates explicit
// don't update state as side effect
// return new state along with value generated
// here's an interface example
trait RNG {
  def nextInt: (Int, RNG)
}


case class SimpleRNG(seed: Long) extends RNG {
  def nextInt: (Int, RNG) = {
    val newSeed = (seed * 0x5DEECE66DL + 0xBL) & 0xFFFFFFFFFFFFL
    val nextRNG = SimpleRNG(newSeed) // create next RNG state from new seed
    val n = (newSeed >>> 16).toInt // >>> == shft_rt w/ zerofill
    (n, nextRNG) // return BOTH a randint, and next RNG state
  }
}

/* Making stateful APIs pure */
class Foo {
  private var s: FooState =   ...
  def bar: Bar
  def baz: Int
}

// if bar and baz mutate, we ca mechanically translate this to
// purely functional API, by making explicit the transition
// from one function to the next
trait Foo {
  def bar: (Bar, Foo)
  def baz: (Int, Foo)
}

// with this patern, we make the caller responsible
// for passing the computed next state through the rest of the program
// if we re-use same RNG, always reproduces the same value as before
def randomPair(rng: RNG): (Int, Int) = {
  val (i1,_) = rng.nextInt
  val (i2,_) = rng.nextInt
  (i1,i2)  // both values will be sme
}

// generate distinct numbers by using rng generated by first call
// to generate the second
def randomPair(rng: RNG): ((Int,Int), RNG) = {
  val (i1,rng2) = rng.nextInt
  val (i2,rng3) = rng2.nextInt
  ((i1,i2), rng3)
}


// Ex 6.1 - Write a fn that uses RNG.nextInt to generate
// an integer between 0 and Int.maxValue.
// handle case when nextInt return int.minValue,
// which doesn't have a non-negative counterpart
def nonNegativeInt(rng: RNG): (Int, RNG) = {
  val (i,r) = rng.nextInt
  (if (i < 0) -(i + 1) else i, r)  // plus 1 to handle int.minValue
}                                  // there is 1 more # in negative range

// dealing with awkwardness in fp
// awkwardness like this is a sign of a missing abstraction
// waiting to be discovered
// look for common patterns to factor out


// Ex 6.2 - Write a fn to generate a Double between 0 and 1,
// not including 1.
def double(rng: RNG): (Double RNG) = {
  val (i, r) = nonNegativeInt()
  (i / r(Int.MaxValue.toDouble + 1), r)
}

// Ex 6.3 - three fns to write
def intDouble(rng: RNG): ((Int, Double), RNG) = {
  val (i, r1) = rng.nextInt
  val (d, r2) = double(r1)
  ((i, d), r2))
}

def doubleInt(rng: RNG): ((Double, Int), RNG) = {
  val((i,d), r) intDouble(rng)
  ((d,i),r)
}

def double3(rng: RNG): ((Double, Double, Double), RNG) = {
  val (d1, r1) = double(rng)
  val (d2, r2) = double(r1)
  val (d3, r3) = double(r2)
  ((d1, d2, d3), r3)
}

// Ex 6.4 - Generate a list of random ints
def ints(count: Int)(rng: RNG): (List[Int], RNG) = {
  if (count <= 0)
    (List(), rng)
  else {
    val (x, r1) = rng.nextInt
    val (xs, r2) = ints(count - 1)(r1)
    (x :: xs, r2)
  }
}

// A tail-recursive solution
def ints2(count: Int)(rng: RNG): (List[Int], RNG) = {
  def go(count: Int, r: RNG, xs: List[Int]): (List[Int], RNG) =
    if (count <= 0)
      (xs, r)
    else {
      val (x, r2) = r.nextInt
      go(count - 1, r2, x :: xs)
    }
  go(count, rng, List())
}

/** Better API - State Transitions */
// combine state actions using combinators

type Rand[+A] = RNG => (A, RNG)

val int: Rang[Int] = _.nextInt

def unit[A](a: A): Rand[A]
 rng => (a, rng)

// transform output w/o modifying state
def map[A,B](s: Rand[A])(f: A => B): Rand[B] =
  rng => {
    val (a, rng2) = s(rng)
    (f(a), rng2)
  }

def nonNegativeEven: Rand[Int] =
  map(nonNegativeInt)(i => i - i % 2)

// 6.5 - use map to reimplement double
  map(nonNegativeInt)(_ / (Int.MaxValue.toDouble + 1))


// Implement map2
/def map2[A,B,C](ra: Rand[A], rb: Rand[B])(f: (A, B) => C): Rand[C] = {
  rng => {
    val (a,r1) = ra(rng)
    val (b,r2) = rb(r1)
    (f(a,b), r2)
  }
}
// with map2, we can now combine arbitrary RNG state functions
def both[A,B](ra: Rand[A], rb: Rand[B]): Rand[(A,B)] =
  map2(ra, rb)((_,_))

// and now it's even simpler
val randIntDouble: Rand[(Int, Double)] =
  both(int, double)

val randDoubleInt: Rand[(Double, Int)] =
  both(double, int)


// 6.7 - Combine a whole list of RNG functions using sequence
// combines a List of transitions into a single transition
def sequence[A](fs: List[Rand[A]]): Rand[List[A]] = {
 fs.foldRight(unit(List[A]))((f, acc) => map2(f, acc)(_ :: _))
}

def nonNegativeLessThan(n: Int): Rand[Int] = { rng =>
  val (i, rng2) = nonNegativeInt(rng)
  val mod = i % n
  if (i + (n-1) - mod >= 0)
    (mod, rng2)
  else nonNegativeLessThan(n)(rng)
}

// 6.8 - flatMap combinator
def flatMap[A,B](f: Rand[A])(g: A => Rand[B]): Rand[B] =
  rng => {
    val (a,r1) = f(rng)
    g(a)(r1) // we pass the new state along
  }

def nonNegativeLessThan(n: Int): Rand[Int] = {
  flatMap(nonNegativeInt)  {
    val mod = i % n
    if (i + (n-1) - mod >=0) unit(mod) else nonNegativeLessThan(n)
  }
}


// 6.9 - re-implement map and map2 in terms of flatMap
def _map[A,B](s: Rand[A])(f: A => B): Rand[B] =
  flatMap(s)(a => unit(f(a)))

def _map2[A,B,C](ra: Rand[A], rb: Rand[B])(f: (A,B) => C): Rand[C] =
  flatMap(ra)(a => map(rb)(b => f(a,b)))

// now, we can do something like:
def rollDie: Rand[Int] = nonNegativeLessThan(6)

case class State[S, +A](run: S => (A,S)) {
  def map[B](f: A => B): State[S,B] =
    flatMap(a => unit(f(a)))
  def map2[B,C](sb: State[S,B])(f: (A,B) => C): State[S, C] =
    flatMap(a => sb.map(b => f(a,b)))
  def flatMap[B](f: A => State[S,B]): State[S,B] = State( s => {
    val (a, s1) = run(s)
    f(a).run(s1)
  })
}

// imperative style
// modify incoming state by applying fn, f
def modfify[S](f: S => S): State[S, Unit] = for {
  s <- get
 _ <- set(f(s))
} yield ()

def get[S]: State[S, S] = State(s => (s,s))
def set[S](s: S): State[S, Unit] = State(_ => ((), s))
